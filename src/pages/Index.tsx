import { useState, useEffect } from "react";
import { TaskList } from "@/components/TaskList";
import { TaskDetail } from "@/components/TaskDetail";
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import { TaskForm } from "@/components/TaskForm";
import { DateFilter } from "@/components/DateFilter";
import { SubjectManager } from "@/components/SubjectManager";
import { useIsMobile } from "@/hooks/use-mobile";
import { Task } from "@/types/task";
import { tasksService } from "@/services/tasks";
import { useToast } from "@/components/ui/use-toast";

const Index = () => {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [selectedTask, setSelectedTask] = useState<Task | null>(null);
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const isMobile = useIsMobile();
  const { toast } = useToast();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadTasks();
  }, []);

  const loadTasks = async () => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π...');
      const loadedTasks = await tasksService.getAllTasks();
      console.log('‚úÖ –ó–∞–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', loadedTasks);
      setTasks(loadedTasks);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è",
        variant: "destructive",
      });
    }
  };

  const handleCreateTask = async (task: Task) => {
    try {
      console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', task);
      const taskId = await tasksService.createTask({
        ...task,
        subjectId: task.subject, // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –ø–æ–∑–∂–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–≤—è–∑–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        files: [],
      });
      console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID:', taskId);
      await loadTasks(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
      toast({
        title: "–£—Å–ø–µ—Ö",
        description: "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ",
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
        variant: "destructive",
      });
    }
  };

  const handleUpdateTask = async (updatedTask: Task) => {
    try {
      console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:', updatedTask);
      await tasksService.updateTask(updatedTask.id, {
        ...updatedTask,
        subjectId: updatedTask.subject, // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
      });
      console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      await loadTasks(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
      toast({
        title: "–£—Å–ø–µ—Ö",
        description: "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
        variant: "destructive",
      });
    }
  };

  const handleDeleteTask = async (taskId: string) => {
    try {
      console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:', taskId);
      await tasksService.deleteTask(taskId);
      console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
      setSelectedTask(null);
      await loadTasks(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
      toast({
        title: "–£—Å–ø–µ—Ö",
        description: "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
        variant: "destructive",
      });
    }
  };

  const filteredTasks = selectedDate
    ? tasks.filter(
        (task) =>
          task.dueDate.toDateString() === selectedDate.toDateString()
      )
    : tasks;

  const sortedTasks = [...filteredTasks].sort((a, b) => {
    if (a.completed === b.completed) {
      return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime();
    }
    return a.completed ? 1 : -1;
  });

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 py-6">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-gray-900">–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</h1>
          <div className="flex gap-2">
            <Dialog>
              <DialogTrigger asChild>
                <Button variant="outline">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏</Button>
              </DialogTrigger>
              <DialogContent>
                <SubjectManager />
              </DialogContent>
            </Dialog>
            <Dialog>
              <DialogTrigger asChild>
                <Button>
                  <Plus className="mr-2 h-4 w-4" />
                  –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
                </Button>
              </DialogTrigger>
              <DialogContent>
                <TaskForm onSubmit={handleCreateTask} />
              </DialogContent>
            </Dialog>
          </div>
        </div>
        
        <DateFilter
          selectedDate={selectedDate}
          onDateSelect={setSelectedDate}
          onClear={() => setSelectedDate(null)}
        />

        <div className={`flex ${isMobile ? 'flex-col' : 'gap-6'} mt-6`}>
          <div className={`${isMobile ? 'w-full' : 'w-1/3'}`}>
            <TaskList
              tasks={sortedTasks}
              onTaskSelect={setSelectedTask}
              selectedTask={selectedTask}
              onUpdate={handleUpdateTask}
            />
          </div>
          {(!isMobile || selectedTask) && (
            <div className={`${isMobile ? 'w-full mt-4' : 'w-2/3'}`}>
              <TaskDetail
                task={selectedTask}
                onClose={() => setSelectedTask(null)}
                onUpdate={handleUpdateTask}
                onDelete={handleDeleteTask}
              />
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Index;