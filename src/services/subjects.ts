import { query } from '@/lib/db';
import { v4 as uuidv4 } from 'uuid';

export interface Subject {
  id: string;
  name: string;
}

export const subjectsService = {
  async getAllSubjects(): Promise<Subject[]> {
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤...');
    try {
      const subjects = await query<Subject[]>('SELECT * FROM subjects ORDER BY name');
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${subjects.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`);
      return subjects;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', error);
      throw error;
    }
  },

  async createSubject(name: string): Promise<string> {
    console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:', name);
    try {
      const id = uuidv4();
      await query(
        'INSERT INTO subjects (id, name) VALUES (?, ?)',
        [id, name]
      );
      console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID:', id);
      return id;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:', error);
      throw error;
    }
  },

  async updateSubject(id: string, name: string): Promise<void> {
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:', { id, name });
    try {
      await query(
        'UPDATE subjects SET name = ? WHERE id = ?',
        [name, id]
      );
      console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:', error);
      throw error;
    }
  },

  async deleteSubject(id: string): Promise<void> {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:', id);
    try {
      await query('DELETE FROM subjects WHERE id = ?', [id]);
      console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:', error);
      throw error;
    }
  }
};